// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Repository;

#nullable disable

namespace Repository.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230930215545_initial7")]
    partial class initial7
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Core.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("MainCategory")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Categories Table", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MainCategory = "Elektronik",
                            Name = "Beyaz Eşya"
                        },
                        new
                        {
                            Id = 2,
                            MainCategory = "Elektronik",
                            Name = "Bilgisayar"
                        },
                        new
                        {
                            Id = 3,
                            MainCategory = "Elektronik",
                            Name = "Küçük Ev Aletleri"
                        },
                        new
                        {
                            Id = 4,
                            MainCategory = "Elektronik",
                            Name = "Telefon"
                        });
                });

            modelBuilder.Entity("Core.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("MainCategory")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(16,2)");

                    b.Property<int>("Stock")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products Table", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            MainCategory = "Elektronik",
                            Name = "LG BUZDOLABI",
                            Price = 138999m,
                            Stock = 100
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            MainCategory = "Elektronik",
                            Name = "VESTEL BUZDOLABI",
                            Price = 16425m,
                            Stock = 80
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            MainCategory = "Elektronik",
                            Name = "SIEMENS BUZDOLABI",
                            Price = 37959m,
                            Stock = 70
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            MainCategory = "Elektronik",
                            Name = "SAMSUNG BUZDOLABI",
                            Price = 37989m,
                            Stock = 50
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 2,
                            MainCategory = "Elektronik",
                            Name = "LENOVA BILGISAYAR",
                            Price = 13899m,
                            Stock = 100
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 2,
                            MainCategory = "Elektronik",
                            Name = "HUAWEİ BILGISAYAR",
                            Price = 14425m,
                            Stock = 80
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 2,
                            MainCategory = "Elektronik",
                            Name = "APPLE BILGISAYAR",
                            Price = 38959m,
                            Stock = 70
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 2,
                            MainCategory = "Elektronik",
                            Name = "ASUS BILGISAYAR",
                            Price = 24000m,
                            Stock = 50
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 3,
                            MainCategory = "Elektronik",
                            Name = "VESTEL KETTLE",
                            Price = 1400m,
                            Stock = 100
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 3,
                            MainCategory = "Elektronik",
                            Name = "ARZUM BLENDER",
                            Price = 1000m,
                            Stock = 80
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 3,
                            MainCategory = "Elektronik",
                            Name = "SINBO TARTI",
                            Price = 250m,
                            Stock = 70
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 3,
                            MainCategory = "Elektronik",
                            Name = "KIWI AIRFRYER",
                            Price = 4500m,
                            Stock = 50
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 4,
                            MainCategory = "Elektronik",
                            Name = "IPHONE 15",
                            Price = 55000m,
                            Stock = 100
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 4,
                            MainCategory = "Elektronik",
                            Name = "IPHONE 14 ",
                            Price = 42000m,
                            Stock = 80
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 4,
                            MainCategory = "Elektronik",
                            Name = "SAMSUNG S23",
                            Price = 28000m,
                            Stock = 70
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 4,
                            MainCategory = "Elektronik",
                            Name = "SAMSUNG FE",
                            Price = 17000m,
                            Stock = 50
                        });
                });

            modelBuilder.Entity("Core.Models.ProductFeature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("Products Futures Table", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = "Beyaz",
                            Description = "Insta View",
                            ProductId = 1
                        },
                        new
                        {
                            Id = 2,
                            Color = "Gri",
                            Description = "No Frost",
                            ProductId = 2
                        },
                        new
                        {
                            Id = 3,
                            Color = "Beyaz",
                            Description = "No Frost",
                            ProductId = 3
                        },
                        new
                        {
                            Id = 4,
                            Color = "Gri",
                            Description = "No Frost",
                            ProductId = 4
                        },
                        new
                        {
                            Id = 5,
                            Color = "Beyaz",
                            Description = "i5 8/512 Gb",
                            ProductId = 5
                        },
                        new
                        {
                            Id = 6,
                            Color = "Siyah",
                            Description = "Matebook D15",
                            ProductId = 6
                        },
                        new
                        {
                            Id = 7,
                            Color = "Beyaz",
                            Description = "Macbook Air 13",
                            ProductId = 7
                        },
                        new
                        {
                            Id = 8,
                            Color = "Gri",
                            Description = "Tuf Gaming",
                            ProductId = 8
                        },
                        new
                        {
                            Id = 9,
                            Color = "Beyaz",
                            Description = "1.5 L",
                            ProductId = 9
                        },
                        new
                        {
                            Id = 10,
                            Color = "Beyaz",
                            Description = "1700 Watt",
                            ProductId = 10
                        },
                        new
                        {
                            Id = 11,
                            Color = "Beyaz",
                            Description = "Dijital",
                            ProductId = 11
                        },
                        new
                        {
                            Id = 12,
                            Color = "Beyaz",
                            Description = "11 L",
                            ProductId = 12
                        },
                        new
                        {
                            Id = 13,
                            Color = "Beyaz",
                            Description = "512 GB",
                            ProductId = 13
                        },
                        new
                        {
                            Id = 14,
                            Color = "Siyah",
                            Description = "128 GB",
                            ProductId = 14
                        },
                        new
                        {
                            Id = 15,
                            Color = "Beyaz",
                            Description = "128 GB",
                            ProductId = 15
                        },
                        new
                        {
                            Id = 16,
                            Color = "Mavi",
                            Description = "128 GB",
                            ProductId = 16
                        });
                });

            modelBuilder.Entity("Core.Models.Session", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("TokenExpiration")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserAccountId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserAccountId")
                        .IsUnique();

                    b.ToTable("Session");
                });

            modelBuilder.Entity("Core.Models.UserAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("UserAccounts");
                });

            modelBuilder.Entity("Core.Models.Product", b =>
                {
                    b.HasOne("Core.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Core.Models.ProductFeature", b =>
                {
                    b.HasOne("Core.Models.Product", "Product")
                        .WithOne("ProductFeature")
                        .HasForeignKey("Core.Models.ProductFeature", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Core.Models.Session", b =>
                {
                    b.HasOne("Core.Models.UserAccount", "UserAccount")
                        .WithOne("Session")
                        .HasForeignKey("Core.Models.Session", "UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("Core.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Core.Models.Product", b =>
                {
                    b.Navigation("ProductFeature");
                });

            modelBuilder.Entity("Core.Models.UserAccount", b =>
                {
                    b.Navigation("Session");
                });
#pragma warning restore 612, 618
        }
    }
}
